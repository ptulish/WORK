import 'dart:math';import 'package:flutter/foundation.dart';import 'package:flutter/material.dart';import 'dart:io';import 'package:android_intent/android_intent.dart';import 'package:flutter_blue_plus/flutter_blue_plus.dart';import 'package:fluttertoast/fluttertoast.dart';import 'package:geolocator/geolocator.dart';import 'package:permission_handler/permission_handler.dart';import 'package:workproject/bleHelper.dart';import 'dart:async';import 'package:workproject/globalUtilities.dart';import 'package:workproject/pages/menu_screen.dart';// import '../Components/crc16.dart';import '../classes/singleton.dart';import '../dataTypes.dart';class MainScreen extends StatefulWidget {  final BluetoothDevice? device;  const MainScreen({Key? key, this.device}) : super(key: key);  @override  // ignore: library_private_types_in_public_api  _MainScreen createState() => _MainScreen();}class _MainScreen extends State<MainScreen> {// VARIABLES  BluetoothDevice? device;  bool isLocationServiceEnabled = false;  bool isLocationPermissionGranted = false;  int batteryLevel = 100;  FlutterBluePlus flutterBlue = FlutterBluePlus.instance;  String? deviceAddress;  late BluetoothService targetService;  BLEHelper bleHelper = BLEHelper();  List<int> list = [];  int ind = 0;  double speedKmPerHour = 0;// INITIALIZATION  @override  void initState() {    super.initState();    checkLocationService();    checkLocationPermission();    listenToPositionChanges();        if (widget.device != null){      device = widget.device;      if (kDebugMode) {        print(device?.name);      }      // ignore: unnecessary_set_literal      Timer.periodic(const Duration(milliseconds: 300), (Timer t) => {sendPacket(COMM_PACKET_ID.COMM_GET_VALUES.index)});    }  }// WIDGETS  Widget topBar(){    return Row(        mainAxisAlignment: MainAxisAlignment.spaceBetween,        children: [          const Padding(            padding: EdgeInsets.all(5),            child: Image(              image: AssetImage('assets/images/logo1.png'), width: 50, height: 50,            ),          ),          const Text(            "SyDev1",            style: TextStyle(                color: Color.fromRGBO(230, 230, 230, 100),                fontSize: 40            ),          ),          IconButton(            icon: const Icon(Icons.menu, size: 40, color: Color.fromRGBO(230, 230, 230, 100),),            onPressed: () {              Navigator.push(                context,                MaterialPageRoute(builder: (context) => const MenuScreen()),              );            },          ),        ]);  }  Widget powerBar() {    //das balken sieht man ganze zeit und eingefullt nach power    return Expanded(      child: Padding(        padding: const EdgeInsets.all(20.0),        child: Container(          decoration: BoxDecoration(            borderRadius: BorderRadius.all(Radius.circular(10)),            border: Border.all(color: Color.fromRGBO(130, 130, 130, 100), width: 3),          ),          child: Stack(            alignment: Alignment.bottomCenter,            children: [              FractionallySizedBox(                heightFactor: 0.7,//Singleton.telemetryPacket.v_in * Singleton.telemetryPacket.current_in / 48.0,                child: Container(                  decoration: BoxDecoration(                    color: Colors.white,                    borderRadius: BorderRadius.all(Radius.circular(10)),                  ),                ),              ),              Center(                child: RotatedBox(                  quarterTurns: 4,                  child: Text(                    'Power',                    style: TextStyle(color: Color.fromRGBO(0, 114, 143, 80), fontSize: 10),                  ),                ),              ),            ],          ),        ),      ),    );  }  Widget _showSpeed() {    return Center(      child: Text(        '${speedKmPerHour.truncate()}',        style: TextStyle(            color: Color.fromRGBO(230, 230, 230, 100),            fontSize: 140,            fontWeight: FontWeight.w500        ),      ),    );  }  Widget _showBattery(String s) {    return Center(      child: Stack(        alignment: Alignment.center,        children: [          // Battery icon (background)          Transform.rotate(            angle: pi / 2,            child: const Icon(              Icons.battery_full,              size: 100,              color: Color.fromRGBO(230, 230, 230, 100),            ),          ),          // Battery level text (foreground)          Text(            '$batteryLevel %',            textAlign: TextAlign.center,            style: const TextStyle(              color: Color.fromRGBO(0, 79, 99, 100),              fontWeight: FontWeight.bold,              fontSize: 55 * 0.4,            ),          ),        ],      ),    );  }  Widget showParam(String param){    String name = '';    String retDigit = '';    switch (param){      case "power":        name = 'POWER';        retDigit = '${(Singleton.telemetryPacket.v_in * Singleton.telemetryPacket.current_in).round()} W';        break;      case "current":        name = "CURRENT";        retDigit = '${Singleton.telemetryPacket.current_in} A';        break;      case "temperature":        name = "TEMPERATURE";        retDigit = '${Singleton.telemetryPacket.temp_mos}°C';        break;      case "voltage":        name = "VOLTAGE";        retDigit = '${Singleton.telemetryPacket.v_in} V';      default:        break;    }    return Expanded(      child: Container(        width: 200,        height: 200,        margin: const EdgeInsets.all(5),        decoration: BoxDecoration(          color: const Color(0xFF2BB8C9),          borderRadius: BorderRadius.circular(5), // Set the border radius to make corners rounded        ),        child: Padding(          padding: const EdgeInsets.only(top: 5),          child: Column(            mainAxisAlignment: MainAxisAlignment.start,            children: [              Text(                name,                style: const TextStyle(                  fontSize: 15,                  color: Colors.white30,                ),              ),              const SizedBox(height: 20),  // Add some space between the two pieces of text              Text(                retDigit,                style: const TextStyle(                  fontSize: 35,                  color: Colors.white,                ),              ),            ],          ),        ),      ),    );  }  Widget statusCell(){    String status = '';    if (Singleton.telemetryPacket.fault_code.name == "FAULT_CODE_NONE"){      status = "OK";    }    return Text(      'Status: $status', //wenn faultcode_none dann "ok      style: const TextStyle(        fontSize: 20,        color: Colors.white70,      ),    );  }//MAIN WIDGET "SCREEN"  @override  Widget build(BuildContext context) {    checkLocationPermission(); // Проверяем разрешение на геопозицию при запуске приложения    return MaterialApp(      title: 'Grid Main Screen',      home: Scaffold(        backgroundColor: const Color.fromRGBO(0, 114, 143, 80),        body:        Padding(padding: const EdgeInsets.only(top: 23, left: 3, right: 3, bottom: 1),          child: Column(            children: [              //first row with logo and template for battery              Expanded(                flex: 12,                child: topBar(),              ),              //second row with template for speedometer              Expanded(                flex: 35,                child: Row(                  children: <Widget>[                    // First column - 20%                    Expanded(                      flex: 2,                      child: Column(                        children: [                          powerBar(),                        ],                      ),                    ),                    // Second column - 40%                    Expanded(                      flex: 5,                      child: Column(                        mainAxisAlignment: MainAxisAlignment.center,                        children: <Widget>[                          _showSpeed(),                        ],                      ),                    ),                    // Third column - 40%                    Expanded(                      flex: 3,                      child: Column(                        mainAxisAlignment: MainAxisAlignment.center,                        children: <Widget>[                          const Expanded(                            child: Align(                              alignment: Alignment.bottomLeft,                              child: Padding(                                padding: EdgeInsets.all(8.0),                                child: Text(                                  "km/h",                                  style: TextStyle(                                    fontSize: 30,                                    color: Color.fromRGBO(230, 230, 230, 100)                                  ),                                ),                              ),                            ),                          ),                          _showBattery('Item 6'),                        ],                      ),                    ),                  ],                )              ),              Expanded(                flex: 54,                  child: Padding(                    padding: const EdgeInsets.only(left: 10, top: 20, right: 10, bottom: 8),                    child: Column (                      children: [                        Expanded(                          flex: 2,                          child: Row(                            children: [                              showParam(Singleton.topLeft),                              showParam(Singleton.topRight),                            ],                          ),                        ),                        Expanded(                          flex: 2,                          child: Row(                            children: [                              //Temperature                              showParam(Singleton.bottomRight),                              showParam(Singleton.bottomLeft),                            ],                          ),                        ),                        //fifth row with status                        Expanded(                          child: Container(                              margin: const EdgeInsets.all(5),                              decoration: BoxDecoration(                                color: const Color(0xFF2BB8C9),                                borderRadius: BorderRadius.circular(10), // Set the border radius to make corners rounded                              ),                              child: Center(                                  child:                                  statusCell(),                              )                          ),                        ),                      ],                    ),                  )              )            ],          ),        ),      ),    );  }  Widget _createCell(String text) {    return Expanded(      child: Container(        alignment: Alignment.center,        margin: const EdgeInsets.all(2), // Add some space between cells        decoration: BoxDecoration(          border: Border.all(color: Colors.black), // Create border        ),        child: Text(text),      ),    );  }// FUNCTIONS  void sendPacket(int command) async {    Uint8List packet = simpleVESCRequest(command);    // Request COMM_GET_VALUES_SETUP from the ESC    if (!await sendBLEData(Singleton.tx, packet, true)) {      globalLogger.e("_requestTelemetry() failed");    } else {      // if (kDebugMode) {      //   print("Hello this is sendBLEData");      // }    }    // if (kDebugMode) {    //   print("after rx tx");    // }  }  void listenToPositionChanges() {    final speedFilter = SpeedFilter(size: 5, threshold: 1.0 / 3.6); // threshold 1 km/h in m/s    final positionStream = Geolocator.getPositionStream(      desiredAccuracy: LocationAccuracy.bestForNavigation,    );    Singleton.positionStreamSubscription = positionStream.handleError((error) {      print("Error: $error");    }).listen((position) {      double speedMetersPerSecond = speedFilter.filter(position.speed);      speedKmPerHour = speedMetersPerSecond * 3.6;      print('Position updated: $position');      print('Speed: ${speedMetersPerSecond} m/s');      print("speed in km/h $speedKmPerHour");    });  }  //LOCATION AND BLUETOOTH CHECK  Future<bool> checkLocationService() async {    isLocationServiceEnabled = await Geolocator.isLocationServiceEnabled();    if (isLocationServiceEnabled && isLocationPermissionGranted) {      return true;    } else {      // Геопозиция отключена, показываем всплывающее окно      showLocationServiceDisabledDialog();      return false;    }  }  Future<void> checkLocationPermission() async {    PermissionStatus permissionStatus = await Permission.location.status;    setState(() {      isLocationPermissionGranted =          permissionStatus == PermissionStatus.granted;    });  }  void showLocationServiceDisabledDialog() {    showDialog(      context: context,      barrierDismissible: false,      builder: (BuildContext context) {        return AlertDialog(          title: const Text('Geoposition is off!'),          content: const Text(              'To use the app you have to enable bluetooth.'),          actions: [            ElevatedButton(              onPressed: () {                // Закрыть приложение                Navigator.of(context).pop();                Fluttertoast.showToast(                  msg: 'App is off',                  toastLength: Toast.LENGTH_SHORT,                  gravity: ToastGravity.BOTTOM,                );                Future.delayed(const Duration(seconds: 1), () => exit(0));              },              child: const Text('Close'),            ),            ElevatedButton(              onPressed: () {                // Открыть настройки устройства                Navigator.of(context).pop();                openLocationSettings();              },              child: const Text('Settings'),            ),          ],        );      },    );  }  Future<void> openLocationSettings() async {    AndroidIntent intent = const AndroidIntent(      action: 'android.settings.LOCATION_SOURCE_SETTINGS',    );    await intent.launch();  }}